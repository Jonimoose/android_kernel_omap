/*
 * drivers/media/video/ov5650_reg.h
 *
 * Register definitions for the OV5650 CameraChip.
 *
 * Author: Pallavi Kulkarni (ti.com)
 *
 * Copyright (C) 2008 Texas Instruments.
 *
 * This file is licensed under the terms of the GNU General Public License
 * version 2. This program is licensed "as is" without any warranty of any
 * kind, whether express or implied.
 */

/* #define SENSOR_OV5650_DEBUG */

#ifdef SENSOR_OV5650_DEBUG
#define DPRINTK_OV5650(format, ...)\
	printk(KERN_INFO "OV5650: " format, ## __VA_ARGS__)
#else
#define DPRINTK_OV5650(format, ...)
#endif

#ifndef OV5650_REG_H
#define OV5650_REG_H

/* Register initialization tables for ov5650 */
/* Terminating list entry for reg */
#define OV5650_REG_TERM		0xFFFF
/* Terminating list entry for val */
#define OV5650_VAL_TERM		0xFF

#define OV5650_USE_XCLKA	0
#define OV5650_USE_XCLKB	1

#define OV5650_CSI2_VIRTUAL_ID	0x1

#define DEBUG_BASE		0x08000000

#define VAUX_2_8_V		0x09
#define VAUX_1_8_V		0x05
#define VAUX_DEV_GRP_P1	0x20
#define VAUX_DEV_GRP_NONE	0x00

/* Sensor specific GPIO signals */
#define OV5650_RESET_GPIO	98
#define OV5650_STANDBY_GPIO	64

/* FPS Capabilities */
#define OV5650_MIN_FPS			1
#define OV5650_DEF_FPS			15
#define OV5650_MAX_FPS			30

/* Frame Delays */
#define OV5650_GAIN_FRAME_DELAY 1
#define OV5650_EXP_TIME_FRAME_DELAY 2

#define SENSOR_DETECTED		1
#define SENSOR_NOT_DETECTED	0

/* XCLK Frequency in Hz*/
#define OV5650_XCLK_MIN		27000000
#define OV5650_XCLK_MAX		27000000

#define OV5650_MAX_FRAME_LENGTH_LINES 0xFFF8
#define OV5650_MAX_LINE_LENGTH_PCK 0xFFF0

/* Gain Values (linear, Q8) */
#define OV5650_MIN_LINEAR_GAIN	((u16)(1.25 * 256))
#define OV5650_MAX_LINEAR_GAIN	((u16)(31.0 * 256))

/* Exposure time values (usecs)*/
#define OV5650_MIN_EXPOSURE	100
#define OV5650_MAX_EXPOSURE	1000000


/* Product ID */
#define OV5650_PID			0x5650
/* Max supported Rev */
#define OV5650_REV			1

/* ------------------ Register defines ------------------ */
/*
 * System Control Registers
 */
#define SYSTEM_CONTROL0			0x3008
#define OV5650_CHIP_ID_H			0x300A
#define OV5650_CHIP_ID_L			0x300B
/*
#define OV5650_R_PLL1			0x300E
#define OV5650_R_PLL1_VT_SYS_DIV_SHIFT 4
#define OV5650_R_PLL1_VT_SYS_DIV_MASK (0xF <<
	OV5650_R_PLL1_VT_SYS_DIV_SHIFT)
#define OV5650_R_PLL1_DIV8_MASK 	0x7
#define OV5650_R_PLL2			0x300F
#define OV5650_R_PLL2_OP_SYS_DIV_SHIFT 4
#define OV5650_R_PLL2_OP_SYS_DIV_MASK (0xF <<
	OV5650_R_PLL2_OP_SYS_DIV_SHIFT)
#define OV5650_R_PLL2_OP_PIX_DIV_MASK 	0xF
#define OV5650_R_PLL3			0x3010
#define OV5650_R_PLL3_PLL_MULT_MASK 	0x7F
#define OV5650_R_PLL4			0x3011
#define OV5650_R_PLL4_PRE_DIV_MASK 		0xF

#define OV5650_SYS				0x3012
#define OV5650_ADDVS_H				0x301E
#define OV5650_ADDVS_L				0x301F
#define OV5650_FRM_LEN_LINES_H			0x3020
#define OV5650_FRM_LEN_LINES_L			0x3021
#define OV5650_LINE_LEN_PCK_H			0x3022
#define OV5650_LINE_LEN_PCK_L			0x3023
#define OV5650_X_ADDR_START_H			0x3024
#define OV5650_X_ADDR_START_L			0x3025
#define OV5650_Y_ADDR_START_H			0x3026
#define OV5650_Y_ADDR_START_L			0x3027
#define OV5650_X_ADDR_END_H			0x3028
#define OV5650_X_ADDR_END_L			0x3029
#define OV5650_Y_ADDR_END_H			0x302A
#define OV5650_Y_ADDR_END_L			0x302B
#define OV5650_X_OUTPUT_SIZE_H			0x302C
#define OV5650_X_OUTPUT_SIZE_L			0x302D
#define OV5650_Y_OUTPUT_SIZE_H			0x302E
#define OV5650_Y_OUTPUT_SIZE_L			0x302F
#define OV5650_RESERVED_3058			0x3058
#define OV5650_IO_CTRL2				0x30B2
#define OV5650_DSIO0				0x30B3
#define OV5650_DSIO0_RPCLK_DIV_MASK 	0x3
#define OV5650_FRS0				0x30B7
#define OV5650_RESERVED_30E1			0x30E1
#define OV5650_FRS1				0x30E4
#define OV5650_FRS2				0x30E5
#define OV5650_FRS3				0x30E6
#define OV5650_FRS4				0x30E7
#define OV5650_FRS4_STRB_SOURCE_SEL_SHIFT 1
#define OV5650_FRS5				0x30E8
#define OV5650_FRS5_ROLLING_SHUT_STRB_EN_SHIFT 7
#define OV5650_FRS5_STRB_PLS_WIDTH_SHIFT 2
#define OV5650_FRS5_STROBE_MODE_SHIFT 0
#define OV5650_FRS6				0x30EA
#define OV5650_FRS7				0x30EB
#define OV5650_IMAGE_SYSTEM			0x30FA
#define OV5650_IMAGE_TRANSFORM			0x30F8
#define OV5650_IMAGE_TRANSFORM_HSUB_MASK (0x3)
#define OV5650_IMAGE_TRANSFORM_VSUB_SHIFT 2
#define OV5650_IMAGE_TRANSFORM_VSUB_MASK (0x3 <<
	OV5650_IMAGE_TRANSFORM_VSUB_SHIFT)
#define OV5650_IMAGE_TRANSFORM_HMIRROR_SHIFT 6
#define OV5650_IMAGE_TRANSFORM_HMIRROR_MASK (0x1 <<
	OV5650_IMAGE_TRANSFORM_HMIRROR_SHIFT)
#define OV5650_IMAGE_TRANSFORM_VFLIP_SHIFT 7
#define OV5650_IMAGE_TRANSFORM_VFLIP_MASK (0x1 <<
	OV5650_IMAGE_TRANSFORM_VFLIP_SHIFT)
#define OV5650_GROUP_WR			0x30FF
#define OV5650_ISP_ENBL_0			0x3300
#define OV5650_CBAR	 			0x3303
#define OV5650_DIG_GAIN 			0x3309
#define OV5650_SIZE_H0 				0x3316
#define OV5650_LENC				0x33E4
*/
#define OV5650_LONG_EXPO_H			0x3500
#define OV5650_LONG_EXPO_M			0x3501
#define OV5650_LONG_EXPO_L			0x3502
/*
#define OV5650_DVP_CTRL08			0x3508
*/
#define OV5650_AGC_ADJ				0x350B
/*
#define OV5650_DVP_CTRL0E			0x350E
*/
#define OV5650_TIMING_HTS_H			0x380C
#define OV5650_TIMING_HTS_L			0x380D
#define OV5650_TIMING_VTS_H			0x380E
#define OV5650_TIMING_VTS_L			0x380F
#define OV5650_ISP_CTRL46			0x5046

/* len correction */
/*
#define LENC_1_1_DOWNSAMPLING 0x02
#define LENC_2_1_DOWNSAMPLING 0x07
#define LENC_4_1_DOWNSAMPLING 0x0b
#define LENC_8_1_DOWNSAMPLING 0x0f
*/

/*
 * END - System Control Registers
 */

/*
 * OTP Registers
 */
#define OV5650_OTP_SUB_ADDR	0x3D00
#define OV5650_OTP_DATA		0x3D04
/*
 * END - OTP Registers
 */

/*
 * OUT_TOP Registers
 */

/*
#define OV5650_MIPI_CTRL01	0x3601

#define OV5650_MIPI_CTRL02	0x3602
#define OV5650_MIPI_CTRL02_VIRTUALCH_ID_MASK	(0x3 << 6)


#define OV5650_MIPI_CTRL0A	0x360A
#define OV5650_MIPI_CTRL0B	0x360B
#define OV5650_MIPI_CTRL0B_DSBL_DATA_LANE_2_MASK  0x1
#define OV5650_MIPI_CTRL0B_DSBL_DATA_LANE_1_MASK  0x2
*/

#define OV5650_MIPI_CTRL14	0x4814

/*
#define OV5650_MIPI_CTRL14_MIN_HS_ZERO_NUI_SHIFT	2
#define OV5650_MIPI_CTRL14_MIN_HS_ZERO_NUI_MASK		(0x3F <<
				OV5650_MIPI_CTRL14_MIN_HS_ZERO_NUI_SHIFT)
#define OV5650_MIPI_CTRL14_MIN_HS_ZERO_H_MASK	0x3

#define OV5650_MIPI_CTRL15	0x3615
#define OV5650_MIPI_CTRL15_MIN_HS_ZERO_L_MASK	0xFF

#define OV5650_MIPI_CTRL16	0x3616
#define OV5650_MIPI_CTRL16_MIN_HS_TRAIL_NUI_SHIFT	2
#define OV5650_MIPI_CTRL16_MIN_HS_TRAIL_NUI_MASK	(0x3F <<
				OV5650_MIPI_CTRL16_MIN_HS_TRAIL_NUI_SHIFT)
#define OV5650_MIPI_CTRL16_MIN_HS_TRAIL_H_MASK	0x3

#define OV5650_MIPI_CTRL17	0x3617
#define OV5650_MIPI_CTRL17_MIN_HS_TRAIL_L_MASK	0xFF

#define OV5650_MIPI_CTRL18	0x3618
#define OV5650_MIPI_CTRL18_MIN_CLK_ZERO_NUI_SHIFT	2
#define OV5650_MIPI_CTRL18_MIN_CLK_ZERO_NUI_MASK	(0x3F <<
				OV5650_MIPI_CTRL18_MIN_CLK_ZERO_NUI_SHIFT)
#define OV5650_MIPI_CTRL18_MIN_CLK_ZERO_H_MASK	0x3

#define OV5650_MIPI_CTRL19	0x3619
#define OV5650_MIPI_CTRL19_MIN_CLK_ZERO_L_MASK	0xFF
*/

#define OV5650_MIPI_CLK_PREPARE_MIN_H	0x481E
#define OV5650_MIPI_CLK_PREPARE_MIN_H_MASK		0x3
#define OV5650_MIPI_CLK_PREPARE_MIN_L	0x481F

#define OV5650_MIPI_UI_CLK_PREPARE_MIN	0x482D

/*
#define OV5650_MIPI_CTRL1E	0x361E
#define OV5650_MIPI_CTRL1E_MIN_CLK_POST_NUI_SHIFT	2
#define OV5650_MIPI_CTRL1E_MIN_CLK_POST_NUI_MASK	(0x3F <<
				OV5650_MIPI_CTRL1E_MIN_CLK_POST_NUI_SHIFT)
#define OV5650_MIPI_CTRL1E_MIN_CLK_POST_H_MASK	0x3

#define OV5650_MIPI_CTRL1F	0x361F
#define OV5650_MIPI_CTRL1F_MIN_CLK_POST_L_MASK	0xFF

#define OV5650_MIPI_CTRL20	0x3620
#define OV5650_MIPI_CTRL20_MIN_CLK_TRAIL_NUI_SHIFT	2
#define OV5650_MIPI_CTRL20_MIN_CLK_TRAIL_NUI_MASK	(0x3F <<
				OV5650_MIPI_CTRL20_MIN_CLK_TRAIL_NUI_SHIFT)
#define OV5650_MIPI_CTRL20_MIN_CLK_TRAIL_H_MASK	0x3

#define OV5650_MIPI_CTRL21	0x3621
#define OV5650_MIPI_CTRL21_MIN_CLK_TRAIL_L_MASK	0xFF

#define OV5650_MIPI_CTRL22	0x3622
#define OV5650_MIPI_CTRL22_MIN_LPX_P_NUI_SHIFT	2
#define OV5650_MIPI_CTRL22_MIN_LPX_P_NUI_MASK	(0x3F <<
					OV5650_MIPI_CTRL22_MIN_LPX_P_NUI_SHIFT)
#define OV5650_MIPI_CTRL22_MIN_LPX_P_H_MASK	0x3

#define OV5650_MIPI_CTRL23	0x3623
#define OV5650_MIPI_CTRL23_MIN_LPX_P_L_MASK	0xFF

#define OV5650_MIPI_CTRL24	0x3624
#define OV5650_MIPI_CTRL24_MIN_HS_PREPARE_NUI_SHIFT	2
#define OV5650_MIPI_CTRL24_MIN_HS_PREPARE_NUI_MASK	(0x3F <<
				OV5650_MIPI_CTRL24_MIN_HS_PREPARE_NUI_SHIFT)
#define OV5650_MIPI_CTRL24_MIN_HS_PREPARE_H_MASK	0x3

#define OV5650_MIPI_CTRL25	0x3625
#define OV5650_MIPI_CTRL25_MIN_HS_PREPARE_L_MASK	0xFF

#define OV5650_MIPI_CTRL28	0x3628
#define OV5650_MIPI_CTRL28_MIN_HS_EXIT_NUI_SHIFT	2
#define OV5650_MIPI_CTRL28_MIN_HS_EXIT_NUI_MASK	(0x3F <<
				OV5650_MIPI_CTRL28_MIN_HS_EXIT_NUI_SHIFT)
#define OV5650_MIPI_CTRL28_MIN_HS_EXIT_H_MASK	0x3

#define OV5650_MIPI_CTRL29	0x3629
#define OV5650_MIPI_CTRL29_MIN_HS_EXIT_L_MASK	0xFF
*/

/*
 * END - OUT_TOP Registers
 */

/* ------------------------------------------------------ */

int ov5650_write_reg(struct i2c_client *client, u16 reg, u8 val);

/* Exposure time values */
#define DEF_MIN_EXPOSURE	250
#define DEF_MAX_EXPOSURE	128000
#define DEF_EXPOSURE	    33000
#define EXPOSURE_STEP	    50

#define DEF_LINEAR_GAIN	(2*256)
#define LINEAR_GAIN_STEP	0x1

struct ov5650_sensor_regif {
	u16 len;
	u32 addr;
	u32 val;
} ;

enum ov5650_orientation {
	OV5650_NO_HORZ_FLIP_OR_VERT_FLIP = 0,
	OV5650_HORZ_FLIP_ONLY,
	OV5650_VERT_FLIP_ONLY,
	OV5650_HORZ_FLIP_AND_VERT_FLIP
};

enum ov5650_shutter_type {
	ROLLING_SHUTTER_TYPE = 0,
	MECH_SHUTTER_TYPE
};

enum ov5650_flash_type {
	LED_FLASH_TYPE = 0,
	XENON_FLASH_TYPE
};

/* define a structure for ov5650 register initialization values */
struct ov5650_reg {
	unsigned int reg;
	unsigned char val;
};

struct capture_size_ov {
	unsigned long width;
	unsigned long height;
};

/*
 * struct ov5650_clk_settings - struct for storage of sensor
 * clock settings
 * @pll_mult: pll multiplier
 * @pll_pre_div: pre pll divider
 * @vt_sys_div: video system clock divider
 * @op_pix_div: output pixel clock divider
 * @op_sys_div: output system clock divider
 * @div8: pixel bit divider
 * @rp_clk_div: video pixel clock divider
 */
struct ov5650_clk_settings {
	u16 pre_div_q1;
	u16 div_p;
	u16 div_s;
	u16 div_l;
	u16 div_m;
	u16 seld2p5_q1;
	u16 seld5;
	u16 out_blk_div;
};

/*
 * struct ov5650_frame_settings - struct for storage of sensor
 * frame settings
 * @frame_len_lines: number of lines in frame
 * @line_len_pck: number of pixels in line
 */
struct ov5650_frame_settings {
	u16	frame_len_lines_min;
	u16	frame_len_lines;
	u16	line_len_pck_min;
	u16	line_len_pck;
	u16	x_addr_start;
	u16	x_addr_end;
	u16	y_addr_start;
	u16	y_addr_end;
	u16	x_output_size;
	u16	y_output_size;
	u8 v_subsample;
	u8 h_subsample;
	u16 binning_sensitivity;
	struct v4l2_fract min_time_per_frame;
};

/*
 * struct ov5650_mipi_settings - struct for storage of sensor
 * initial exposure settings
 * @coarse_int_tm: coarse resolution interval time (line times)
 * @fine_int_tm: fine resolution interval time (pixel times)
 */
struct ov5650_mipi_settings {
	u16	num_data_lanes;
	u16	hs_settle;
};

/*
 * struct ov5650_sensor_settings - struct for storage of
 * sensor settings.
 */
struct ov5650_sensor_settings {
	struct ov5650_clk_settings clk;
	struct ov5650_frame_settings frame;
	struct ov5650_mipi_settings mipi;
};

/* Array of image sizes supported by OV5650.  These must be ordered from
 * smallest image size to largest.
 */
const static struct capture_size_ov ov5650_sizes[] = {
	/* SIZE_80K */
	{ 324, 244 },
	/* SIZE_315K */
	{ 648, 486 },
	/* SIZE_1_25M */
	{ 1296, 972 },
	/* SIZE_5M */
	{ 2592, 1944 },
};

enum image_size_ov {
	SIZE_80K,
	SIZE_315K,
	SIZE_1_25M,
	SIZE_5M
};
enum pixel_format_ov {
	RAW10
};

#define OV_NUM_IMAGE_SIZES		4
#define OV_NUM_PIXEL_FORMATS		1

const static struct ov5650_reg ov5650_common[OV_NUM_IMAGE_SIZES][150] = {
	/* SIZE_324x244_Default settings */
	{
		/* MIPI Sensor Raw QVGA 94.5fps
		Two-lane 10Bit with 27MHz EXCLK and 75.6MHz */
		/* {0x4805, 0xd0},	// Disable MIPI lanes */
		{0x3103, 0x93},
		{0x3b07, 0x0c},
		{0x3017, 0xff},
		{0x3018, 0xfc},
		{0x3706, 0x41},
		{0x3613, 0xc4},
		{0x370d, 0x42},
		{0x3703, 0x9a},
		{0x3630, 0x22},
		{0x3605, 0x04},
		{0x3606, 0x3f},
		{0x3712, 0x13},
		{0x370e, 0x00},
		{0x370b, 0x40},
		{0x3600, 0x54},
		{0x3601, 0x05},
		{0x3713, 0x22},
		{0x3714, 0x27},
		{0x3631, 0x22},
		{0x3612, 0x1a},
		{0x3604, 0x40},
		{0x3705, 0xdc},
		{0x370a, 0x83},
		{0x370c, 0xc8},
		{0x3710, 0x28},
		{0x3702, 0x3a},
		{0x3704, 0x18},
		{0x3a18, 0x00},
		{0x3a19, 0xf8},
		{0x3a00, 0x38},
		{0x3800, 0x02},  /* HREF Start = 596 */
		{0x3801, 0x54},
		{0x380c, 0x0c},
		{0x380d, 0xb4},
		{0x380e, 0x07},
		{0x380f, 0xb0},
		{0x3830, 0x50},
		{0x3a08, 0x12},
		{0x3a09, 0x70},
		{0x3a0a, 0x0f},
		{0x3a0b, 0x60},
		{0x3a0d, 0x06},
		{0x3a0e, 0x06},
		{0x3a13, 0x54},
		{0x3815, 0x82},
		{0x5059, 0x80},
		{0x505a, 0x0a},
		{0x505b, 0x2e},
		{0x3713, 0x92},
		{0x3714, 0x17},
		{0x3803, 0x06},  /* VREF Start = 6 */
		{0x3804, 0x05},  /* HREF Width = 1296 */
		{0x3805, 0x10},
		{0x3806, 0x00},  /* VREF Height = 244 */
		{0x3807, 0xf4},
		{0x3808, 0x01},  /* Horz Output Size = 324 */
		{0x3809, 0x44},
		{0x380a, 0x00},  /* Vert Output Size = 244 */
		{0x380b, 0xf4},
		{0x380c, 0x0a},  /* Total Horz Size = 2564 */
		{0x380d, 0x04},
		{0x380e, 0x03},  /* Total Vert Size = 983 */
		{0x380f, 0xd7},
		{0x3815, 0x81},
		{0x3824, 0x23},
		{0x3825, 0x20},
		{0x3826, 0x00},
		{0x3827, 0x08},
		{0x370d, 0xc2},
		{0x3a08, 0x17},
		{0x3a09, 0x64},
		{0x3a0a, 0x13},
		{0x3a0b, 0x80},
		{0x3a00, 0x58},
		{0x3a1a, 0x06},
		{0x3503, 0x00},
		{0x3623, 0x01},
		{0x3633, 0x24},
		{0x3c01, 0x34},
		{0x3c04, 0x28},
		{0x3c05, 0x98},
		{0x3c07, 0x07},
		{0x3c09, 0xc2},
		{0x4000, 0x05},
		{0x401d, 0x28},
		{0x4001, 0x02},
		{0x401c, 0x42},
		{0x5046, 0x01},
		{0x3810, 0x40},
		{0x3836, 0x41},
		{0x505f, 0x04},
		{0x5000, 0x00},
		{0x5001, 0x00},
		{0x5002, 0x02},
		{0x503d, 0x00},
		{0x5901, 0x08},
		{0x585a, 0x01},
		{0x585b, 0x2c},
		{0x585c, 0x01},
		{0x585d, 0x93},
		{0x585e, 0x01},
		{0x585f, 0x90},
		{0x5860, 0x01},
		{0x5861, 0x0d},
		{0x5180, 0xc0},
		{0x5184, 0x00},
		{0x470a, 0x00},
		{0x470b, 0x00},
		{0x470c, 0x00},
		{0x300f, 0x8e},
		{0x3603, 0xa7},
		{0x3615, 0x50},
		{0x3632, 0x55},
		{0x3620, 0x56},
		{0x3621, 0xaf},
		{0x3818, 0xc3},
		{0x3631, 0x36},
		{0x3632, 0x5f},
		{0x3711, 0x24},
		{0x401f, 0x03},
		{0x3011, 0x0E},
		{0x3007, 0x3B},
		{0x3010, 0x13},
		{0x4801, 0x0f},
		{0x3003, 0x03},
		{0x300e, 0x0c},
		{0x4803, 0x50},
		{0x4800, 0x04},
		{0x300f, 0x8f},
		{0x3815, 0x82},
		{0x3003, 0x01},
		{0x3503, 0x03},
		{0x3501, 0x33},  /* expT = 28msec */
		{0x3502, 0xA0},
		{0x350B, 0x00},  /* gain = 1.0x */
		{0x3400, 0x08},
		{0x3402, 0x08},
		{0x3404, 0x08},
		{0x3406, 0x01},
		{0x4007, 0x08},
		{0x4837, 0x6A},  /* MIPI Pclk Period 2x */
		{OV5650_REG_TERM, OV5650_VAL_TERM},
	},
	/* SIZE_648x486_Default settings */
	{
		/* MIPI Sensor Raw VGA 70.02fps
		   Two-lane 10Bit with 27MHz EXCLK and 75.6MHz */
		/* {0x4805, 0xd0},	// Disable MIPI lanes */
		{0x3103, 0x93},
		{0x3b07, 0x0c},
		{0x3017, 0xff},
		{0x3018, 0xfc},
		{0x3706, 0x41},
		{0x3613, 0xc4},
		{0x370d, 0x42},
		{0x3703, 0x9a},
		{0x3630, 0x22},
		{0x3605, 0x04},
		{0x3606, 0x3f},
		{0x3712, 0x13},
		{0x370e, 0x00},
		{0x370b, 0x40},
		{0x3600, 0x54},
		{0x3601, 0x05},
		{0x3713, 0x22},
		{0x3714, 0x27},
		{0x3631, 0x22},
		{0x3612, 0x1a},
		{0x3604, 0x40},
		{0x3705, 0xdc},
		{0x370a, 0x81},
		{0x370c, 0xc8},
		{0x3710, 0x28},
		{0x3702, 0x3a},
		{0x3704, 0x18},
		{0x3a18, 0x00},
		{0x3a19, 0xf8},
		{0x3a00, 0x38},
		{0x3800, 0x02},  /* HREF Start = 596 */
		{0x3801, 0x54},
		{0x3803, 0x0c},
		{0x380c, 0x0c},
		{0x380d, 0xb4},
		{0x380e, 0x07},
		{0x380f, 0xb0},
		{0x3830, 0x50},
		{0x3a08, 0x12},
		{0x3a09, 0x70},
		{0x3a0a, 0x0f},
		{0x3a0b, 0x60},
		{0x3a0d, 0x06},
		{0x3a0e, 0x06},
		{0x3a13, 0x54},
		{0x3815, 0x82},
		{0x5059, 0x80},
		{0x505a, 0x0a},
		{0x505b, 0x2e},
		{0x3703, 0x9a},
		{0x3713, 0x92},
		{0x3714, 0x17},
		{0x3804, 0x05},  /* HREF Width = 1296 */
		{0x3805, 0x10},
		{0x3806, 0x01},  /* VREF Height = 486 */
		{0x3807, 0xe6},
		{0x3808, 0x02},  /* Horz Output Size = 648 */
		{0x3809, 0x88},
		{0x380a, 0x01},  /* Vert Output Size = 486 */
		{0x380b, 0xe6},
		{0x380c, 0x08},  /* Total Horz Size = 2168 */
		{0x380d, 0x78},
		{0x3a08, 0x12},
		{0x3a09, 0x70},
		{0x3a0a, 0x0f},
		{0x3a0b, 0x60},
		{0x3a0d, 0x01},
		{0x3a0e, 0x01},
		{0x380e, 0x04},  /* Total Vert Size = 1162 */
		{0x380f, 0x8A},
		{0x3815, 0x81},
		{0x3824, 0x23},
		{0x3825, 0x20},
		{0x3803, 0x08},  /* VREF Start = 8 */
		{0x3826, 0x00},
		{0x3827, 0x08},
		{0x3a1a, 0x06},
		{0x3503, 0x00},
		{0x3623, 0x01},
		{0x3633, 0x24},
		{0x3c01, 0x34},
		{0x3c04, 0x28},
		{0x3c05, 0x98},
		{0x3c07, 0x07},
		{0x3c09, 0xc2},
		{0x4000, 0x05},
		{0x401d, 0x28},
		{0x4001, 0x02},
		{0x401c, 0x42},
		{0x5046, 0x01},
		{0x3810, 0x40},
		{0x3836, 0x41},
		{0x505f, 0x04},
		{0x5000, 0x00},
		{0x5001, 0x00},
		{0x5002, 0x02},
		{0x503d, 0x00},
		{0x5901, 0x04},
		{0x585a, 0x01},
		{0x585b, 0x2c},
		{0x585c, 0x01},
		{0x585d, 0x93},
		{0x585e, 0x01},
		{0x585f, 0x90},
		{0x5860, 0x01},
		{0x5861, 0x0d},
		{0x5180, 0xc0},
		{0x5184, 0x00},
		{0x470a, 0x00},
		{0x470b, 0x00},
		{0x470c, 0x00},
		{0x3603, 0xa7},
		{0x3615, 0x50},
		{0x3632, 0x55},
		{0x3620, 0x56},
		{0x3621, 0xaf},
		{0x3818, 0xc2},
		{0x3631, 0x36},
		{0x3632, 0x5f},
		{0x3711, 0x24},
		{0x401f, 0x03},
		{0x3011, 0x0E},
		{0x3007, 0x3B},
		{0x3010, 0x11},
		{0x4801, 0x0f},
		{0x3003, 0x03},
		{0x300e, 0x0c},
		{0x4803, 0x50},
		{0x4800, 0x04},
		{0x300f, 0x8f},
		{0x3815, 0x82},
		{0x3003, 0x01},
		{0x3503, 0x03},
		{0x3501, 0x3D},  /* expT = 28msec */
		{0x3502, 0x00},
		{0x350B, 0x00},  /* gain = 1.0x */
		{0x3400, 0x08},
		{0x3402, 0x08},
		{0x3404, 0x08},
		{0x3406, 0x01},
		{0x4007, 0x08},
		{0x4837, 0x35},  /* MIPI Pclk Period 2x */
		{OV5650_REG_TERM, OV5650_VAL_TERM},
	},

	/* SIZE_1296x972 Default settings */
	{
		/* MIPI Sensor Raw 1296x972 36.03fps
		   Two-lane 10Bit with 27MHz EXCLK and 75.6MHz */
		/*
		{0x4805, 0xd0},	// Disable MIPI lanes
		*/
		{0x3103, 0x93},
		{0x3b07, 0x0d},
		{0x3017, 0x7f},
		{0x3018, 0xfc},
		{0x3706, 0x41},
		{0x3703, 0x9a},
		{0x3613, 0x44},
		{0x3630, 0x22},
		{0x3605, 0x04},
		{0x3606, 0x3f},
		{0x3712, 0x13},
		{0x370e, 0x00},
		{0x370b, 0x40},
		{0x3600, 0x54},
		{0x3601, 0x05},
		{0x3713, 0x92},
		{0x3714, 0x17},
		{0x3631, 0x22},
		{0x3612, 0x1a},
		{0x3604, 0x40},
		{0x3705, 0xda},
		{0x370a, 0x80},
		{0x370c, 0xa0},
		{0x3710, 0x28},
		{0x3702, 0x3a},
		{0x3704, 0x18},
		{0x3a18, 0x00},
		{0x3a19, 0xf8},
		{0x3a00, 0x38},
		{0x3800, 0x03},  /* HREF Start = 808 */
		{0x3801, 0x28},
		{0x3803, 0x0c},  /* VREF Start = 12*/
		{0x3804, 0x05},  /* HREF Width = 1296 */
		{0x3805, 0x10},
		{0x3806, 0x03},  /* VREF Height = 972 */
		{0x3807, 0xcc},
		{0x3808, 0x05},  /* Horz Output Size = 1296 */
		{0x3809, 0x10},
		{0x380a, 0x03},  /* Vert Output Size = 972 */
		{0x380b, 0xcc},
		{0x3830, 0x50},
		{0x3a08, 0x12},
		{0x3a09, 0x70},
		{0x3a0a, 0x0f},
		{0x3a0b, 0x60},
		{0x3a0d, 0x06},
		{0x3a0e, 0x06},
		{0x3a13, 0x54},
		{0x3815, 0x82},
		{0x5059, 0x80},
		{0x505a, 0x0a},
		{0x505b, 0x2e},
		{0x3a1a, 0x06},
		{0x3503, 0x00},
		{0x3623, 0x01},
		{0x3633, 0x24},
		{0x3c01, 0x34},
		{0x3c04, 0x28},
		{0x3c05, 0x98},
		{0x3c07, 0x07},
		{0x3c09, 0xc2},
		{0x401c, 0x48},
		{0x4000, 0x01},
		{0x401d, 0x28},
		{0x5046, 0x01},
		{0x3810, 0x40},
		{0x3836, 0x41},
		{0x5000, 0x00},
		{0x5001, 0x00},
		{0x5002, 0x00},
		{0x503d, 0x00},
		{0x5901, 0x00},
		{0x585a, 0x01},
		{0x585b, 0x2c},
		{0x585c, 0x01},
		{0x585d, 0x93},
		{0x585e, 0x01},
		{0x585f, 0x90},
		{0x5860, 0x01},
		{0x5861, 0x0d},
		{0x5180, 0xc0},
		{0x5184, 0x00},
		{0x470a, 0x00},
		{0x470b, 0x00},
		{0x470c, 0x00},
		{0x3603, 0xa7},
		{0x3615, 0x50},
		{0x3632, 0x55},
		{0x3620, 0x56},
		{0x3621, 0xAf},
		{0x381a, 0x3c},
		{0x3818, 0xc0},
		{0x3631, 0x36},
		{0x3632, 0x5f},
		{0x3711, 0x24},
		{0x401f, 0x03},
		{0x370D, 0x42},
		{0x3818, 0xC1},
		{0x380c, 0x08},  /* Total Horz Size = 2124 */
		{0x380d, 0x4C},
		{0x380e, 0x04},  /* Total Vert Size = 1186 (30fps) */
		{0x380f, 0xa2},
		{0x3011, 0x0E},
		{0x3012, 0x02},
		{0x3007, 0x3B},
		{0x4801, 0x0f},
		{0x3003, 0x03},
		{0x300e, 0x0c},
		{0x4803, 0x50},
		{0x4800, 0x04},
		{0x300f, 0x8f},
		{0x3815, 0x82},
		{0x3003, 0x01},
		{0x3503, 0x03},
		{0x3501, 0x3e},  /* expT = 28msec */
		{0x3502, 0x50},
		{0x350B, 0x00},  /* gain = 1.0x */
		{0x3400, 0x08},
		{0x3402, 0x08},
		{0x3404, 0x08},
		{0x3406, 0x01},
		{0x4007, 0x08},
		{0x4837, 0x1A},  /* MIPI Pclk Period 2x */
		{OV5650_REG_TERM, OV5650_VAL_TERM},
	},
	/* SIZE_2592x1944 Default settings */
	{
		/* MIPI Sensor Raw QSXGA 2592x1944 11.81fps
		   Two-lane 10Bit with 27MHz EXCLK, SYSCLK = 75.6MHz */
		/* {0x4805, 0xd0},	// Disable MIPI lanes */
		{0x3103, 0x93},
		{0x3b07, 0x0c},
		{0x3017, 0xff},
		{0x3018, 0xfc},
		{0x3706, 0x41},
		{0x3703, 0xe6},
		{0x3613, 0x44},
		{0x3630, 0x22},
		{0x3605, 0x04},
		{0x3606, 0x3f},
		{0x3712, 0x13},
		{0x370e, 0x00},
		{0x370b, 0x40},
		{0x3600, 0x54},
		{0x3601, 0x05},
		{0x3713, 0x22},
		{0x3714, 0x27},
		{0x3631, 0x22},
		{0x3612, 0x1a},
		{0x3604, 0x40},
		{0x3705, 0xda},
		{0x370a, 0x80},
		{0x370c, 0x00},
		{0x3710, 0x28},
		{0x3702, 0x3a},
		{0x3704, 0x18},
		{0x3a18, 0x00},
		{0x3a19, 0xf8},
		{0x3a00, 0x38},
		{0x3800, 0x02},  /* HREF Start = 596 */
		{0x3801, 0x54},
		{0x3803, 0x0c},  /* VREF Start = 12 */
		{0x380c, 0x0c},  /* Total Horz Size = 3252 */
		{0x380d, 0xb4},
		{0x380e, 0x07},  /* Total Vert Size = 1968 */
		{0x380f, 0xb0},
					   /* HREF Width (default) = 2592
					    VREF Height (default) = 1944
					    Horz Output Size (default) = 2592
					    Vert Output Size (default) = 1944 */
		{0x3830, 0x50},
		{0x3a08, 0x12},
		{0x3a09, 0x70},
		{0x3a0a, 0x0f},
		{0x3a0b, 0x60},
		{0x3a0d, 0x06},
		{0x3a0e, 0x06},
		{0x3a13, 0x54},
		{0x3815, 0x82},
		{0x5059, 0x80},
		{0x505a, 0x0a},
		{0x505b, 0x2e},
		{0x3a1a, 0x06},
		{0x3623, 0x01},
		{0x3633, 0x24},
		{0x3c01, 0x34},
		{0x3c04, 0x28},
		{0x3c05, 0x98},
		{0x3c07, 0x07},
		{0x3c09, 0xc2},
		{0x4000, 0x05},
		{0x401d, 0x28},
		{0x4001, 0x02},
		{0x401c, 0x46},
		{0x5046, 0x01},
		{0x3810, 0x40},
		{0x3836, 0x41},
		{0x505f, 0x04},
		{0x5000, 0x00},
		{0x5001, 0x00},
		{0x5002, 0x00},
		{0x503d, 0x00},
		{0x5901, 0x00},
		{0x585a, 0x01},
		{0x585b, 0x2c},
		{0x585c, 0x01},
		{0x585d, 0x93},
		{0x585e, 0x01},
		{0x585f, 0x90},
		{0x5860, 0x01},
		{0x5861, 0x0d},
		{0x5180, 0xc0},
		{0x5184, 0x00},
		{0x470a, 0x00},
		{0x470b, 0x00},
		{0x470c, 0x00},
		{0x300f, 0x8e},
		{0x3603, 0xa7},
		{0x3615, 0x50},
		{0x3632, 0x55},
		{0x3620, 0x56},
		{0x3621, 0x2f},
		{0x381a, 0x3c},
		{0x3818, 0xc0},
		{0x3631, 0x36},
		{0x3632, 0x5f},
		{0x3711, 0x24},
		{0x401f, 0x03},
		{0x3011, 0x0E},
		{0x3012, 0x02},
		{0x3007, 0x3B},
		{0x4801, 0x0f},
		{0x3003, 0x03},
		{0x300e, 0x0c},
		{0x4803, 0x50},
		{0x4800, 0x04},
		{0x300f, 0x8f},
		{0x3815, 0x82},
		{0x3003, 0x01},
		{0x3503, 0x03},
		{0x3501, 0x28},  /* expT = 28msec */
		{0x3502, 0x80},
		{0x350B, 0x00},  /* gain = 1.0x */
		{0x3400, 0x08},
		{0x3402, 0x08},
		{0x3404, 0x08},
		{0x3406, 0x01},
		{0x4007, 0x08},
		{0x4837, 0x1A},  /* MIPI Pclk Period 2x */
		/*
		{0x401d, 0x08},  // TEMP - disable BLC frame averaging
		*/
		{OV5650_REG_TERM, OV5650_VAL_TERM},
	},
};

#ifdef USE_OV5650_FLICKER
/* 50-60 Hz Detection settings */
const static struct ov5650_reg ov5650_50_60_hz_detect_tbl[] = {
	{0x3014, 0x40},
	{0x304c, 0x0c},
	{0x30a4, 0x00},
	{0x30ad, 0x04},
	{0x3040, 0x00},
	{0x3041, 0x34},
	{0x3044, 0x28},
	{0x3045, 0x98},
	{0x3046, 0x00},
	{0x3047, 0x00},
	{0x3048, 0x01},
	{0x3049, 0xc2},
	{0x304e, 0x02},
	{0x304a, 0xaf},  /* 27Mhz */
	{0x304b, 0xc8},  /* 27Mhz */
	/* read 303d[0], 1=50hz, 0=60hz */
	{OV5650_REG_TERM, OV5650_VAL_TERM},
};
#endif

#ifdef USE_OV5650_LENS_CORRECTION
/* Lens correction settings */
const static struct ov5650_reg len_correction_tbl[] = {
	/* G */
	{0x3358, 0x28},
	{0x3359, 0x0d},
	{0x335a, 0x0c},
	{0x335b, 0x0a},
	{0x335c, 0x0a},
	{0x335d, 0x0b},
	{0x335e, 0x0d},
	{0x335f, 0x13},
	{0x3360, 0x0d},
	{0x3361, 0x0a},
	{0x3362, 0x07},
	{0x3363, 0x05},
	{0x3364, 0x05},
	{0x3365, 0x06},
	{0x3366, 0x08},
	{0x3367, 0x09},
	{0x3368, 0x0b},
	{0x3369, 0x06},
	{0x336a, 0x03},
	{0x336b, 0x02},
	{0x336c, 0x01},
	{0x336d, 0x02},
	{0x336e, 0x04},
	{0x336f, 0x06},
	{0x3370, 0x08},
	{0x3371, 0x04},
	{0x3372, 0x01},
	{0x3373, 0x00},
	{0x3374, 0x00},
	{0x3375, 0x00},
	{0x3376, 0x02},
	{0x3377, 0x04},
	{0x3378, 0x08},
	{0x3379, 0x04},
	{0x337a, 0x01},
	{0x337b, 0x00},
	{0x337c, 0x00},
	{0x337d, 0x00},
	{0x337e, 0x03},
	{0x337f, 0x04},
	{0x3380, 0x0b},
	{0x3381, 0x06},
	{0x3382, 0x04},
	{0x3383, 0x02},
	{0x3384, 0x02},
	{0x3385, 0x03},
	{0x3386, 0x05},
	{0x3387, 0x07},
	{0x3388, 0x0f},
	{0x3389, 0x0b},
	{0x338a, 0x08},
	{0x338b, 0x07},
	{0x338c, 0x07},
	{0x338d, 0x07},
	{0x338e, 0x0a},
	{0x338f, 0x0b},
	{0x3390, 0x26},
	{0x3391, 0x11},
	{0x3392, 0x0e},
	{0x3393, 0x0c},
	{0x3394, 0x0b},
	{0x3395, 0x0c},
	{0x3396, 0x0e},
	{0x3397, 0x11},

	/* B */
	{0x3398, 0x10},
	{0x3399, 0x10},
	{0x339a, 0x10},
	{0x339b, 0x10},
	{0x339c, 0x10},
	{0x339d, 0x10},
	{0x339e, 0x10},
	{0x339f, 0x10},
	{0x33a0, 0x10},
	{0x33a1, 0x10},
	{0x33a2, 0x10},
	{0x33a3, 0x10},
	{0x33a4, 0x10},
	{0x33a5, 0x10},
	{0x33a6, 0x10},
	{0x33a7, 0x10},
	{0x33a8, 0x10},
	{0x33a9, 0x10},
	{0x33aa, 0x10},
	{0x33ab, 0x10},
	{0x33ac, 0x10},
	{0x33ad, 0x10},
	{0x33ae, 0x10},
	{0x33af, 0x10},
	{0x33b0, 0x10},
	{0x33b1, 0x10},
	{0x33b2, 0x10},
	{0x33b3, 0x10},
	{0x33b4, 0x10},
	{0x33b5, 0x10},
	{0x33b6, 0x10},
	{0x33b7, 0x10},
	{0x33b8, 0x10},
	{0x33b9, 0x10},
	{0x33ba, 0x10},
	{0x33bb, 0x10},

	/* R */
	{0x33bc, 0x10},
	{0x33bd, 0x10},
	{0x33be, 0x10},
	{0x33bf, 0x10},
	{0x33c0, 0x10},
	{0x33c1, 0x10},
	{0x33c2, 0x10},
	{0x33c3, 0x10},
	{0x33c4, 0x10},
	{0x33c5, 0x10},
	{0x33c6, 0x10},
	{0x33c7, 0x10},
	{0x33c8, 0x10},
	{0x33c9, 0x10},
	{0x33ca, 0x10},
	{0x33cb, 0x10},
	{0x33cc, 0x10},
	{0x33cd, 0x10},
	{0x33ce, 0x10},
	{0x33cf, 0x10},
	{0x33d0, 0x10},
	{0x33d1, 0x10},
	{0x33d2, 0x10},
	{0x33d3, 0x10},
	{0x33d4, 0x10},
	{0x33d5, 0x10},
	{0x33d6, 0x10},
	{0x33d7, 0x10},
	{0x33d8, 0x10},
	{0x33d9, 0x10},
	{0x33da, 0x10},
	{0x33db, 0x10},
	{0x33dc, 0x10},
	{0x33dd, 0x10},
	{0x33de, 0x10},
	{0x33df, 0x10},
	{0x3350, 0x06},
	{0x3351, 0xab},
	{0x3352, 0x05},
	{0x3353, 0x00},
	{0x3354, 0x04},
	{0x3355, 0xf8},
	{0x3356, 0x07},
	{0x3357, 0x74},
	{OV5650_REG_TERM, OV5650_VAL_TERM},
};
#endif

#ifdef USE_OV5650_COMMON_CSI2
const static struct ov5650_reg ov5650_common_csi2[] = {
	{OV5650_MIPI_CTRL0B, 0x0f},  /* disable MIPI output (enabled later) */
	{0x3601, 0x16},
	{OV5650_REG_TERM, OV5650_VAL_TERM},
};
#endif

#endif /* ifndef OV5650_REG_H */

